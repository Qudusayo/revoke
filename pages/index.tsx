import Head from "next/head";
import styles from "@/styles/Home.module.scss";
import { Quicksand } from "next/font/google";
import Card from "@/components/Card/Card";
import { useEffect, useState } from "react";
import { ResponseData } from "@/types";
import Shimmer from "@/components/Shimmer/Shimmer";
import NoApproval from "@/components/NoApproval/NoApproval";

export default function Home() {
  const [result, setResult] = useState<ResponseData[]>([]);
  const [address, setAddress] = useState("");
  const [network, setNetwork] = useState("eth");
  const [fetchingStatus, setFetchingStatus] = useState(false);
  const [fetchedStatus, setFetchedStatus] = useState(false);

  const fetchWalletApprovals = async () => {
    try {
      setFetchingStatus(true);
      setFetchedStatus(false);

      let response = await fetch(
        `/api/${network}?tokenType=erc20&address=${address}`
      );
      let data = await response.json();

      setResult(data);
    } catch (error) {
    } finally {
      setFetchingStatus(false);
      setFetchedStatus(true);
    }
  };

  const formSubmitHandler = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    fetchWalletApprovals();
  };

  useEffect(() => {
    if (address) fetchWalletApprovals();
  }, [network]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.main}>
        <h2>REVOKE APPROVALS</h2>
        <span>Review and revoke your token approvals for any dApp</span>
      </div>
      <form className={styles.SearchInput} onSubmit={formSubmitHandler}>
        <select value={network} onChange={(e) => setNetwork(e.target.value)}>
          <option value="eth">Ethereum</option>
          <option value="bsc">Binance SC</option>
          <option value="matic">Polygon</option>
          <option value="op">Optimism</option>
        </select>
        <input
          type="text"
          id="address-input"
          placeholder="Search by address"
          autoComplete={"off"}
          value={address}
          onChange={(e) => setAddress(e.target.value)}
        />
        <button type="submit">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            strokeWidth="1.5"
            width={20}
            height={20}
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"
            />
          </svg>
        </button>
      </form>
      <div className={styles.Result}>
        {fetchedStatus &&
          result?.map((item, index) => (
            <Card
              key={index}
              name={item.allowance.value + " " + item.allowance.symbol}
              logo={item.assetIcon}
              spenderName={item.approvedSpenderName}
              spenderAddress={item.approvedSpenderAddress}
              transactionHash={item.transactionHash}
            />
          ))}
        {fetchingStatus &&
          !fetchedStatus &&
          Array(6)
            .fill("")
            .map((_, id) => <Shimmer key={id} />)}
      </div>
      {fetchedStatus && result.length === 0 && <NoApproval />}
    </>
  );
}
